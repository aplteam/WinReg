 R←Test_018(stopFlag batchFlag);path;rc;buf;handle1;data;handle2;handle3;⎕TRAP
⍝ Test all methods that do except a handle and a value rather than a key and a value.
 R←∆Failed
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 path←GetRegPath

⍝ Preconditions
 ##.WinReg.DeleteSubKeyTree path                             ⍝ Delete any left-overs

⍝ Tests...
 handle1←##.WinReg.OpenAndCreateKey path,'sub1'
 handle2←##.WinReg.OpenAndCreateKey path,'sub2'

⍝ Try to read a non-existent default value:
 buf←'mydefault'##.WinReg.GetString handle1'\'
 →FailsIf'mydefault'≢buf

⍝ Create some test data
 ##.WinReg.PutString handle1'\' 'It''s the default'
 ##.WinReg.PutString handle1'str1' 'It''s a string'
 ##.WinReg.PutValue handle1'val1' 2147483647
 ##.WinReg.PutBinary handle1'binary1'(data←¯128+?10⍴256)

 buf←##.WinReg.GetString handle1'\'
 →FailsIf'It''s the default'≢buf

 buf←##.WinReg.GetString handle1'str1'
 →FailsIf'It''s a string'≢buf

 buf←##.WinReg.GetValue handle1'val1'
 →FailsIf 2147483647≢buf

 buf←##.WinReg.KeyInfo handle1
 →FailsIf(4 0,(⍴'binary1'))≢3↑buf

 buf←##.WinReg.GetAllValueNames handle1
 →FailsIf~buf Match'str1' 'val1' 'binary1' '\'

 buf←##.WinReg.GetAllValues handle1
 →FailsIf 4 3≢⍴buf
 →FailsIf~buf[;0]Match'str1' 'val1' 'binary1' '\'

 buf←##.WinReg.DoesValueExist handle1'no'
 →FailsIf(,buf)≢,0

 buf←##.WinReg.DoesValueExist handle1'str1'
 →FailsIf(,buf)≢,1

 buf←##.WinReg.CopyTree handle1 handle2

 buf←##.WinReg.DeleteValue handle2'str1'
 →FailsIf(⊂'str1')∊##.WinReg.GetAllValueNames handle2

 buf←##.WinReg.DeleteSubKey handle2
 →FailsIf 0≠##.WinReg.DoesKeyExist path,'sub2'

 handle3←##.WinReg.OpenKey GetRegPath
 {}##.WinReg.Close handle1
 rc←##.WinReg.DeleteSubKeyTree handle3
 →FailsIf 0≠rc
 {}##.WinReg.Close handle2 handle3

⍝ Tidy up
 rc←##.WinReg.DeleteSubKeyTree path

 R←∆OK
